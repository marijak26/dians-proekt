Index: pipe-and-filter.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import concurrent.futures\r\nimport threading\r\nimport time\r\nfrom datetime import datetime, timedelta\r\n\r\nfrom selenium.common import TimeoutException\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\n\r\nfrom selenium import webdriver\r\nfrom selenium.webdriver.common.by import By\r\nimport pandas as pd\r\nfrom bs4 import BeautifulSoup\r\nfrom selenium.webdriver.support.wait import WebDriverWait\r\n\r\n\r\nclass Pipe:\r\n\r\n    def filter_1(self):\r\n        options = webdriver.ChromeOptions()\r\n        options.add_argument(\"--headless\")\r\n        browser = webdriver.Chrome(options=options)\r\n        browser.get('https://www.mse.mk/en/stats/symbolhistory/kmb')\r\n        source = browser.page_source\r\n        soup = BeautifulSoup(source, 'html.parser')\r\n        all_codes = []\r\n        codes = soup.select('#Code')\r\n\r\n        for code in codes:\r\n            all_codes.append(code.text.split('\\n'))\r\n        all_codes = all_codes[0]\r\n        all_codes = [code for code in all_codes if code.isalpha()]\r\n\r\n        browser.quit()\r\n\r\n        return all_codes\r\n\r\n    def filter_2(self, code):\r\n        try:\r\n            csv_file = pd.read_csv(f\"data/{code}.csv\")\r\n            csv_file['Date'] = pd.to_datetime(csv_file['Date'], dayfirst=True)\r\n            last_date = csv_file['Date'].max().strftime('%d/%m/%Y')\r\n            self.filter_3(code, last_date)\r\n        except FileNotFoundError:\r\n            options = webdriver.ChromeOptions()\r\n            options.add_argument(\"--headless\")\r\n            browser = webdriver.Chrome(options=options)\r\n            browser.get(f\"https://www.mse.mk/en/stats/symbolhistory/{code}\")\r\n\r\n            to_date = datetime.today()\r\n            from_date = (to_date - timedelta(days=364)).date()\r\n            to_date = to_date.date()\r\n            all_data = []\r\n\r\n            for i in range(10):\r\n                enter_dates(browser, from_date, to_date)\r\n                data = extract_data(browser)\r\n                if data is not None:\r\n                    all_data.append(data)\r\n                to_date = from_date\r\n                from_date = to_date - timedelta(days=364)\r\n\r\n            from_date = to_date - timedelta(days=10)\r\n\r\n            enter_dates(browser, from_date, to_date)\r\n\r\n            data = extract_data(browser)\r\n            if data is not None:\r\n                all_data.append(data)\r\n            df = pd.concat(all_data, ignore_index=True)\r\n            df.drop_duplicates(subset='Date')\r\n            df.to_csv(f'data/{code}.csv', index=False)\r\n\r\n            browser.quit()\r\n\r\n    def filter_3(self, code, last_date):\r\n        if datetime.today().date().strftime('%d/%m/%Y') != last_date:\r\n            options = webdriver.ChromeOptions()\r\n            options.add_argument(\"--headless\")\r\n            browser = webdriver.Chrome(options=options)\r\n            browser.get(f\"https://www.mse.mk/en/stats/symbolhistory/{code}\")\r\n            from_input = browser.find_element(By.CSS_SELECTOR,\r\n                                              '#report-filter-container > ul > li:nth-child(1) .div-input > input')\r\n            from_input.click()\r\n            from_input.clear()\r\n            from_input.send_keys(datetime.strptime(str(last_date), \"%d/%m/%Y\").strftime(\"%m/%d/%Y\"))\r\n            find = browser.find_element(By.CSS_SELECTOR, '.container-end > input')\r\n            find.click()\r\n\r\n            data = extract_data(browser)\r\n            if data is not None:\r\n                df = data\r\n                existing_df = pd.read_csv(f'data/{code}.csv')\r\n                existing_df = pd.concat([df, existing_df], ignore_index=True)\r\n                existing_df = existing_df.drop_duplicates(subset='Date')\r\n                existing_df.to_csv(f'data/{code}.csv', index=False)\r\n\r\n            browser.quit()\r\n\r\n\r\ndef enter_dates(browser, from_date, to_date):\r\n    from_input = browser.find_element(By.CSS_SELECTOR,\r\n                                      '#report-filter-container > ul > li:nth-child(1) .div-input > input')\r\n    to_input = browser.find_element(By.CSS_SELECTOR,\r\n                                    '#report-filter-container > ul > li:nth-child(2) .div-input > input')\r\n    from_input.click()\r\n    from_input.clear()\r\n    from_input.send_keys(datetime.strptime(str(from_date), \"%Y-%m-%d\").strftime(\"%m/%d/%Y\"))\r\n\r\n    to_input.click()\r\n    to_input.clear()\r\n    to_input.send_keys(datetime.strptime(str(to_date), \"%Y-%m-%d\").strftime(\"%m/%d/%Y\"))\r\n    find = browser.find_element(By.CSS_SELECTOR, '.container-end > input')\r\n    find.click()\r\n\r\n\r\ndef extract_data(browser):\r\n    while True:\r\n        list = []\r\n\r\n        try:\r\n            WebDriverWait(browser, 1).until(\r\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"table tbody\"))\r\n            )\r\n        except TimeoutException:\r\n            return None\r\n\r\n        source = browser.page_source\r\n        soup = BeautifulSoup(source, 'html.parser')\r\n        body = soup.select_one('tbody')\r\n        rows = body.select('tr')\r\n\r\n        for row in rows:\r\n            date = row.select_one('td:nth-child(1)').text\r\n            date = datetime.strptime(date, '%m/%d/%Y').strftime('%d/%m/%Y')\r\n            cena_na_posledna_transakcija = format_numbers(row.select_one('td:nth-child(2)').text)\r\n            mak = format_numbers(row.select_one('td:nth-child(3)').text)\r\n            min = format_numbers(row.select_one('td:nth-child(4)').text)\r\n            prosecna_cena = format_numbers(row.select_one('td:nth-child(5)').text)\r\n            prom = format_numbers(row.select_one('td:nth-child(6)').text)\r\n            kolicina = format_numbers(row.select_one('td:nth-child(7)').text)\r\n            promet = format_numbers(row.select_one('td:nth-child(8)').text)\r\n            vkupen_promet = format_numbers(row.select_one('td:nth-child(9)').text)\r\n            list.append({'Date': date, 'Price of last transaction': cena_na_posledna_transakcija,\r\n                         'Max': mak, 'Min': min, 'Average price': prosecna_cena,\r\n                         '%chg.': prom, 'Volume': kolicina,\r\n                         'Turnover in BEST in denars': promet,\r\n                         'Total turnover in denars': vkupen_promet})\r\n\r\n        return pd.DataFrame(list)\r\n\r\n\r\ndef format_numbers(number):\r\n    if number is None:\r\n        return number\r\n    number = number.replace(\",\", \"#\")\r\n    number = number.replace(\".\", \",\")\r\n    return number.replace(\"#\", \".\")\r\n\r\n\r\nif __name__ == '__main__':\r\n    start_time = time.time()\r\n    pipe = Pipe()\r\n    codes = pipe.filter_1()\r\n\r\n    codes = [codes[i:i + 20] for i in range(0, len(codes), 20)]\r\n\r\n    with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:\r\n        for code_chunk in codes:\r\n            for code in code_chunk:\r\n                executor.submit(pipe.filter_2, code)\r\n\r\n    end_time = time.time()\r\n    execution_time = end_time - start_time\r\n    print(f\"Time taken: {(execution_time / 60):.2f} min\")\r\n
===================================================================
diff --git a/pipe-and-filter.py b/pipe-and-filter.py
--- a/pipe-and-filter.py	
+++ b/pipe-and-filter.py	
@@ -38,7 +38,7 @@
         try:
             csv_file = pd.read_csv(f"data/{code}.csv")
             csv_file['Date'] = pd.to_datetime(csv_file['Date'], dayfirst=True)
-            last_date = csv_file['Date'].max().strftime('%d/%m/%Y')
+            last_date = csv_file['Date'].max().strftime('%d.%m.%Y')
             self.filter_3(code, last_date)
         except FileNotFoundError:
             options = webdriver.ChromeOptions()
@@ -73,16 +73,18 @@
             browser.quit()
 
     def filter_3(self, code, last_date):
-        if datetime.today().date().strftime('%d/%m/%Y') != last_date:
+        if datetime.today().date().strftime('%d.%m.%Y') != last_date:
             options = webdriver.ChromeOptions()
             options.add_argument("--headless")
             browser = webdriver.Chrome(options=options)
             browser.get(f"https://www.mse.mk/en/stats/symbolhistory/{code}")
+
+
             from_input = browser.find_element(By.CSS_SELECTOR,
                                               '#report-filter-container > ul > li:nth-child(1) .div-input > input')
             from_input.click()
             from_input.clear()
-            from_input.send_keys(datetime.strptime(str(last_date), "%d/%m/%Y").strftime("%m/%d/%Y"))
+            from_input.send_keys(datetime.strptime(str(last_date), "%d.%m.%Y").strftime("%m/%d/%Y"))
             find = browser.find_element(By.CSS_SELECTOR, '.container-end > input')
             find.click()
 
@@ -131,7 +133,7 @@
 
         for row in rows:
             date = row.select_one('td:nth-child(1)').text
-            date = datetime.strptime(date, '%m/%d/%Y').strftime('%d/%m/%Y')
+            date = datetime.strptime(date, '%m/%d/%Y').strftime('%d.%m.%Y')
             cena_na_posledna_transakcija = format_numbers(row.select_one('td:nth-child(2)').text)
             mak = format_numbers(row.select_one('td:nth-child(3)').text)
             min = format_numbers(row.select_one('td:nth-child(4)').text)
